node {
	def repository_id = "bigdata-releases"
	def group_id = "net.zylklab.bigdata"
	def group_id_path = "net/zylklab/bigdata"
	def artifact_id = "grafana-kafka-plugin"
	def artifact_type = "tar.gz"
	def nexus_url = "https://services.zylk.net/nexus"
	def plugin_repository_url = "${nexus_url}/content/repositories/${repository_id}"
	def nexus_read_credentials = "nexus-read-user"

	def host_name = sh (returnStdout: true, script:"hostname -f").trim()
	if(host_name.endsWith("zylk.net")) {
		def versions
		withCredentials([ usernameColonPassword(credentialsId: "${nexus_read_credentials}", variable: "USERPASS")]) {
			global_USERPASS = "${USERPASS}"
			echo "curl versions"
			versions = sh(returnStdout: true, script: "curl -X GET -u '${USERPASS}' --fail -L '${nexus_url}/service/local/lucene/search?repositoryId=${repository_id}&g=${group_id}&a=${artifact_id}' | sed -e '/version/ !d' | sed 's:<version>\\|</version>::g'")
			
			// long version of: versions.split().reverse().sublist(0,10).join("\n")
			versions = versions.split()
			tmp_versions = versions.clone()
			for (i = 0; i < versions.size(); i++) {
				tmp_versions[-1-i] = versions[i]
			}
			while (tmp_versions.size() > 10) {
				tmp_versions.remove(tmp_versions.size()-1)
			}
			versions = tmp_versions.join("\n")
			echo "${versions}"
		}
		properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), disableConcurrentBuilds(), 
			parameters([ string(defaultValue: 'ZYLK', description: 'Deploy Environment (ZYLK)', name: 'environment'),
						string(defaultValue: 'grafana-kafka-plugin', description: 'Plugin module artifact id (datasource-plugin)', name: 'plugin_artifact_id'), 
						choice(choices: "Latest\n${versions}", description: 'Rest module Version', name: 'plugin_version')]),
						pipelineTriggers([])])
	}
	
	def deploy_remote_host
	def deploy_remote_path
	def grafana_deploy_credentials
	def grafana_deploy_user
	
	if (environment == 'ZYLK') {
		deploy_remote_host = "amaterasu000.bigdata.zylk.net"
		deploy_remote_path= "/var/lib/grafana/plugins"
		grafana_deploy_credentials="grafana-amaterasu"
		grafana_deploy_user = "grafana"
	}
	
	if (env.BRANCH_NAME == "master") {
		stage ('Get artifact') {
			if ("${plugin_version}" == "Latest") {
				withCredentials([usernameColonPassword(credentialsId: "${nexus_read_credentials}", variable: "USERPASS")]) {
					echo "curl latest version"
					plugin_version = sh(returnStdout: true, script: "curl -X GET -u '${USERPASS}' --fail -L 'https://services.zylk.net/nexus/service/local/lucene/search?repositoryId=${repository_id}&g=${group_id}&a=${artifact_id}' | sed -e '/latestRelease/ !d' | head -1 | sed 's:<latestRelease>\\|</latestRelease>::g'").trim()
					echo "latest version: ${plugin_version}"
				}
			}
			withCredentials([usernameColonPassword(credentialsId: "${nexus_read_credentials}", variable: "USERPASS")]) {
				echo "curl --fail -L ${plugin_repository_url}/${group_id_path}/${plugin_artifact_id}/${plugin_version}/${plugin_artifact_id}-${plugin_version}.${artifact_type}"
				sh "curl -u '${USERPASS}' --fail -L '${plugin_repository_url}/${group_id_path}/${plugin_artifact_id}/${plugin_version}/${plugin_artifact_id}-${plugin_version}.${artifact_type}' -o ${plugin_artifact_id}-${plugin_version}.${artifact_type}"
			}
		}
		stage ('Move artifact to deploy zone') {
			sshagent (credentials: ["${grafana_deploy_credentials}"]) {
				echo "copy artifact ./${plugin_artifact_id}-${plugin_version}.${artifact_type} to ${grafana_deploy_user}@${deploy_remote_host}:${deploy_remote_path}/${plugin_artifact_id}.${artifact_type}"
				sh "scp -o StrictHostKeyChecking=no ./${plugin_artifact_id}-${plugin_version}.${artifact_type} ${grafana_deploy_user}@${deploy_remote_host}:${deploy_remote_path}/${plugin_artifact_id}.${artifact_type}"
			}
		}
		
		stage ('unzip the content') {
			sshagent (credentials: ["${grafana_deploy_credentials}"]) {
				sh "ssh -o StrictHostKeyChecking=no -l ${grafana_deploy_user} ${deploy_remote_host} tar -xvzf ${deploy_remote_path}/${plugin_artifact_id}.${artifact_type} --directory ${deploy_remote_path}/ --strip-components=1" 
			}
		}
	}
}